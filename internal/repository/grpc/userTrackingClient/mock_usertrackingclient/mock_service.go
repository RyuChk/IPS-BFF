// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_usertrackingclient is a generated GoMock package.
package mock_usertrackingclient

import (
	context "context"
	reflect "reflect"

	mapv1 "github.com/ZecretBone/ips-bff/internal/gen/proto/ips/map/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchOnlineUser mocks base method.
func (m *MockService) FetchOnlineUser(ctx context.Context, building string, floor int) (*mapv1.FetchOnlineUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOnlineUser", ctx, building, floor)
	ret0, _ := ret[0].(*mapv1.FetchOnlineUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOnlineUser indicates an expected call of FetchOnlineUser.
func (mr *MockServiceMockRecorder) FetchOnlineUser(ctx, building, floor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOnlineUser", reflect.TypeOf((*MockService)(nil).FetchOnlineUser), ctx, building, floor)
}
