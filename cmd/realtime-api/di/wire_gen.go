// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"git.cie.com/ips/wire-provider/gin/provider"
	"github.com/ZecretBone/ips-bff/cmd/realtime-api/handler"
	"github.com/ZecretBone/ips-bff/cmd/realtime-api/server"
	"github.com/ZecretBone/ips-bff/internal/config"
	"github.com/ZecretBone/ips-bff/internal/di"
	"github.com/ZecretBone/ips-bff/internal/repository/grpc/presenceclient"
	"github.com/ZecretBone/ips-bff/internal/services/realtime"
	"github.com/google/wire"
)

// Injectors from di.go:

func InitializeContainer() (*Container, func(), error) {
	realtimeServiceConfig := config.ProvideRealtimeServiceConfig()
	grpcConfig := config.ProvideGRPCServiceConfig()
	service := presenceclient.ProvidePresenceServiceClient(grpcConfig)
	realtimeService := realtime.ProvideRealtimeService(realtimeServiceConfig, service)
	realtimeHandler := handler.ProvideRealtimeHandler(realtimeService)
	handlers := handler.Handlers{
		Realtime: realtimeHandler,
	}
	routerCustomizer := server.ProvideGinRouterCustomizer(handlers)
	ginServer, cleanup, err := provider.ProvideGinServer(routerCustomizer)
	if err != nil {
		return nil, nil, err
	}
	container := &Container{
		server:          ginServer,
		RealtimeService: realtimeService,
	}
	return container, func() {
		cleanup()
	}, nil
}

// di.go:

var BaseBindingSet = wire.NewSet(
	ProviderSet,
	CustomizerSet, di.DatabaseSet, di.ConfigSet, di.ProviderSet,
)

var MainBindingSet = wire.NewSet(
	BaseBindingSet, provider.WireSet, wire.Struct(new(Container), "*"),
)
